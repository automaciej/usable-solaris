Turning up a sparc box
======================
Maciej Bliziński
$Id$

So, you've got this sparc machine you're planning to play with, right?

Has it got any CD-ROM? No? Uh oh, you'll need to do some fiddling to get the OS
there.  Your best bet is the network.  I assume you already have an x86 box, and
your network layout looks similar to this one:

--------------------------------------------------------------------------------
+----------+                        +------------+
| x86 box ------(192.168.1.0/24)------ sparc-box |
+----------+                        +------------+
--------------------------------------------------------------------------------

Serial port
-----------

First, you will need to get access to your sparc machine via a serial port. If
it is a Netra (as mine happens to be), you may need to craft your own special
serial cable (see links at the bottom). Otherwise, a standard cable such as
those used with Cisco routers will do. You'll probably use an USB serial
adapter. You'll have a two-path connection to the sparc box.

--------------------------------------------------------------------------------
+-(x86 box)------+                               +-(sparc box)-------+
|                |                               |                   |
|         [eth0] |                               | [hme0]            |
|	       [RJ45] ----(192.168.1.0/24)---- [RJ45]                |
|                |                               |                   |
| [/dev/ttyUSB0] |                               | [/dev/ttya]       |
|              [USB] -----(serial cable)------ [serial port]         |
+----------------+                               +-------------------+
--------------------------------------------------------------------------------

After you connect the USB serial adapter, you should see a new device:
`/dev/ttyUSB0`. You can connect to it using minicom, which is a popular serial
communication program, but you can as well use GNU screen.

--------------------------------------------------------------------------------
stty -F /dev/ttyUSB0 9600
screen /dev/ttyUSB0
--------------------------------------------------------------------------------

At first, you'll see an empty screen. Tap ENTER and you should see something
like this:

--------------------------------------------------------------------------------
lom> █
--------------------------------------------------------------------------------

LOM, the Ligths Out Manager, has a simple command-line interface. Type `help` to
learn more about its functionality.


JumpStart overview
------------------

To get Solaris installed on your sparc box, you need to use something called
JumpStart, or JumpStart Enterprise Toolkit, referred to as JET. It runs on...
Solaris! Haven't we got a chicken and egg problem here? Well, yes, we have.

One way around it would be to install Solaris off a DVD on a physical x86 box
and then use it to install Solaris over the network. I didn't have an extra x86
box laying around, so I decided to install Solaris on a virtual machine.

Alternatively, you could get to understand how JumpStart works and set it up on
GNU/Linux. JumpStart is really a collection of RARP, BOOTP, TFTP and NFS stuff,
there's nothing preventing you from setting them all up. However, I think that
installing Solaris and using JET has a much more flat learning curve.

NOTE: Sun like to distort the common symbol for Intel architecture, `x86`.  You
may see capitalized `X86` or `i86pc` (huh?). I have no idea why is that. I'll
keep calling it the usual way: `x86`.

If we're going the virtual machine route, the diagram will look more like this:

--------------------------------------------------------------------------------
+-(x86 box)------------------+                         +-(sparc box)-----------+
|                            |                         |                       |
| GNU/Linux                  |                         | (No OS yet)           |
|                            |                         |                       |
| +-(virtual machine)--+     |                         |                       |
| |                    |     |                         |                       |
| | Solaris            |     |                         |                       |
| |             [e1000g0]-+  |                         |                       |
| |                    |  |  |                         |                       |
| +--------------------+  |  |                         |                       |
|                         |  |                         |                       |
|                    [vbox0] |                         |                       |
|                         |  |                         |                       |
|                [br0]----+  |                         |                       |
|                         |  |                         |                       |
|                     [eth0] |                         | [hme0]                |
|	                 [RJ45] --(192.168.1.0/24)-- [RJ45]                    |
|                            |                         |                       |
|             [/dev/ttyUSB0] |                         | [/dev/ttya]           |
|                         [USB] ---(serial cable)--- [serial port]             |
|                            |                         |                       |
+----------------------------+                         +-----------------------+
--------------------------------------------------------------------------------

NOTE: Your virtual machine must be L2-adjacent to your sparc box. In other
words, it must be in the same subnet (say, `192.168.0.1/24`). It's because
JumpStart uses RARP, which cannot be routed.  For the same reason, you need to
use bridged networking for your virtual machine.  If you use NAT, RARP will not
work.


Installing VirtualBox
---------------------

I tried running Solaris with few different hypervisors. I got it sort of
installed on kvm, but it didn't really want to run.  My best experiences were
with VirtualBox, which is now a Sun product, so it's important for them, for
political reasons I guess, that it runs Solaris smoothly. Browse the source
code and look into the `scripts/vbox` directory.

VirtualBox website has instructions on how to install VirtualBox; they provide
Ubuntu package repository, which you can add to your `/etc/apt/sources.list`.

Their instructions miss one piece of information: to install kernel modules,
you'll need an additional package with kernel headers:

--------------------------------------------------------------------------------
sudo aptitude install linux-headers-$(uname -r)
--------------------------------------------------------------------------------

You need to use bridged networking with your virtual machine. On Ubuntu, the
network configuration should look like this:

.`/etc/network/interfaces`
--------------------------------------------------------------------------------
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
iface br0 inet dhcp
bridge_ports eth0

auto eth0
auto br0
--------------------------------------------------------------------------------

Create virtual hard disk for the virtual machine.

--------------------------------------------------------------------------------
VBoxManage createvdi -filename /path/to/file.vdi -size 16384
--------------------------------------------------------------------------------

Create the virtual machine and make settings.

--------------------------------------------------------------------------------
VBoxManage createvm -name yourvmname -register
VBoxManage modifyvm yourvmname \
	-ostype Solaris \
	-memory 512m \
	-acpi off \
	-hda /path/to/file.vdi \
	-nic1 hostif \
	-hostifdev1 vbox0 \
	-nictype1 82540EM \
	-cableconnected1 on \
	-nicspeed1 10000 \
	-vrdp on \
	-vrdpport 3990 \
	-boot1 dvd
--------------------------------------------------------------------------------

NOTE: Give your virtual machine 16GB of disk at minimum. You will want to cram
some DVD images on it, plus their extracted form. Of course, you can always
create an additional disk and attach it afterwards, but it's better to save
hassle.

Take a look at the `vrdp` setting. It tells VirtualBox to expose virtual
machine's console via rdesktop protocol. If you're running VirtualBox locally,
you can connect to a running virtual machine with:

--------------------------------------------------------------------------------
rdesktop localhost:3990
--------------------------------------------------------------------------------

If you're running VirtualBox on a remote machine, you can create an ssh tunnel
and use it:

--------------------------------------------------------------------------------
ssh -f -N -C -L 3990:localhost:3990 remotemachine
rdesktop localhost:3990
--------------------------------------------------------------------------------


Installing Solaris
------------------
Get the DVD ISO image from Sun's website. You need to register, but the download
is free.

'Insert' your ISO image into the virtual machine.

--------------------------------------------------------------------------------
VBoxManage modifyvm yourvmname -dvd /path/to/solaris.iso
--------------------------------------------------------------------------------

Start the virtual machine.

--------------------------------------------------------------------------------
VBoxManage startvm yourvmname
--------------------------------------------------------------------------------

And run rdesktop.

I won't go into much detail of how to install Solaris on a virtual machine. Just
a couple of hints.

* I recommend installing a 'whole distribution', even though it takes 5GB and
  installs tons of stuff you won't use. It would be good to avoid installing X,
  KDE and the like, but if you choose any smaller set of packages, you won't
  have even bash. Ouch.
* After Solaris is installed, you get a shiny blue Sun-branded graphical login.
  Don't be tempted to use it! Just to tip you off, `root` user home directory is
  by default `/` (the root directory), and the default desktop environment is
  Gnome. Imagine how much stuff on your system root would be created if you
  logged in.  Instead, click _Options_ near the bottom of the login window, and
  choose _Command Line Login_.

At this point, I'll happily assume you can log in as root, and you see something
like this:

--------------------------------------------------------------------------------
Sun Microsystems Inc.   SunOS 5.10      Generic January 2005
# █
--------------------------------------------------------------------------------

I imagine that you already started typing stuff, and your screen looks now more
like this:

--------------------------------------------------------------------------------
Sun Microsystems Inc.   SunOS 5.10      Generic January 2005
# ps ax         
usage: ps [ -aAdeflcjLPyZ ] [ -o format ] [ -t termlist ]
        [ -u userlist ] [ -U userlist ] [ -G grouplist ]
        [ -p proclist ] [ -g pgrplist ] [ -s sidlist ] [ -z zonelist ]
  'format' is one or more of:
        user ruser group rgroup uid ruid gid rgid pid ppid pgid sid taskid ctid
        pri opri pcpu pmem vsz rss osz nice class time etime stime zone zoneid
        f s c lwp nlwp psr tty addr wchan fname comm args projid project pset
# vim /etc/fstab
vim: not found
# vi /etc/fstab
screen: Unknown terminal type
I don't know what kind of terminal you are on - all I have is 'screen'.
[Using open mode]
"/etc/fstab" [New file] 
:q
# grep -q root /etc/passwd
grep: illegal option -- q
Usage: grep -hblcnsviw pattern file . . .
# ^[[A
^[[A: not found
# █
--------------------------------------------------------------------------------

There's some work you need to do before you can _actually_ work, as opposed to
just staring at a blinking cursor and thinking how awesome it is to have a real
Unix running in front of you. (What does it mean anyway, a _real_ Unix? I never
figured that out.)


Preliminary setup
-----------------

We won't be spending _too_ much time on this, because it's only an intermediate
system, but let's get a little more comfortable here.  The first thing I do
after logging in, is starting bash.

--------------------------------------------------------------------------------
# bash
bash-3.00# █
--------------------------------------------------------------------------------

It's got sucky prompt by default, let's set it to something different.

// bash-3.00# PS1="\u@\h \w # "
--------------------------------------------------------------------------------
bash-3.00# PS1="\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] "
root@vsol01 / # echo "PS1=\"$PS1\"" >> ~/.bashrc
root@vsol01 / # █
--------------------------------------------------------------------------------

That's better. Now, the first thing you most probably want to do, is getting
a set of GNU tools. Here, I recommend using blastwave repository. Go to
Blastwave website and follow instructions _How to use Blastwave_.

If you want to do any editing in vi and you're using GNU screen, you need to set
your TERM variable into something that bare Solaris understands:

--------------------------------------------------------------------------------
export TERM=xterm
--------------------------------------------------------------------------------

Let's set up some things:

--------------------------------------------------------------------------------
echo >> /etc/opt/csw/pkgutil.conf \
  "mirror=ftp://ftp.heanet.ie/mirrors/blastwave.org/unstable/"

echo >> /etc/default/login \
  "PATH=/bin:/sbin:/usr/sbin:/usr/bin:/opt/csw/sbin:/opt/csw/bin:\
/opt/SUNWjet/bin:/usr/sfw/bin:/usr/sfw/sbin:/usr/ccs/bin"

echo >> /etc/default/login \
  "PATH=/bin:/sbin:/usr/sbin:/usr/bin:/opt/csw/sbin:/opt/csw/bin:\
/opt/SUNWjet/bin:/usr/sfw/bin:/usr/sfw/sbin:/usr/ccs/bin"
--------------------------------------------------------------------------------

Since we were setting up PATHs, you can logout and log back in.

--------------------------------------------------------------------------------
pkgutil --catalog
--------------------------------------------------------------------------------

Now you can install all the software available from Blastwave. Some of my first
choices:

* vim
* elinks
* findutils (and running `gupdatedb &`)
* gawk, ggrep, gsed, gtar
* wget, rsync
* sudo
* tree
* screen, mc

Installing JET, JumpStart Enterprise Toolkit
--------------------------------------------

Go to the JumpStart website, download the `jet.pkg.bz2` package and follow
instructions. It's basically about installing the jet package, then copying
Solaris media and configuring your client.

Some stuff that isn't covered in JumpStart instructions:

--------------------------------------------------------------------------------
mkdir -p /export/install/{pkgs,patches}
--------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
You might want to install `SUNWjass`. It's free as in free beer. Download the
package, untar (`gtar xfv ...`) and install it.

Sun Explorer is also useful. It is a set of scripts that collect information
about your Solaris system. It's good for learning: run it and examine data it
collects. Sun made it a bit difficult to incorporate Explorer into JumpStart as
they don't distribute `SUNWexplo` and `SUNWexplr` packages. Instead, they
distribute a self-extracting shell script. However, when you run the shell
script, it stops to ask you a question, and it does it _after_ extracting your
packages. Use another terminal to access your Solaris box and acquire your
packages (in directory format) from `/tmp/STBinstall`.
////////////////////////////////////////////////////////////////////////////////

Here's a command that I used to copy Solaris media (DVD):

--------------------------------------------------------------------------------
copy_solaris_media -d /export/install/media/10_U6_SPARC -n 10_U6_SPARC \
  -i /mnt/solaris-stuff sol-10-u6-ga1-sparc-dvd.iso
--------------------------------------------------------------------------------

In my case, `/mnt/solaris-stuff` was an NFS share exported from GNU/Linux which
I had trouble setting up and mounting. It's better to simply scp the ISO image
to your Solaris system.

If you however decide to mount a NFS share, it's probably exported from
GNU/Linux, which means you'll run into a problem where you export NFS 3 from
GNU/Linux, while Solaris client expects NFS 4. You'll be getting rather
unhelpful error messages. Edit `/etc/default/nfs` on Solaris and set client max
NFS version to 3. Then try mounting again.

Make sure that `/export/install` is exported via NFS:

--------------------------------------------------------------------------------
share -o ro,anon=0 /export/install
shareall
--------------------------------------------------------------------------------

NOTE: You can't have `/export/install` mounted via NFS. If you do, JET needs to
export it and you can't export something that is a remote mount. You need to
have it on a local disk.

What is a template
~~~~~~~~~~~~~~~~~~

A _template_ in JET is not so much a template, at least from your perspective.
It is a template in a sense, that it's used to generate configuration for
jumpstart, the underlying technology, which is really a collection of RARP, TFTP
and NFS stuff.

It's best if you have your hostname configured in DNS and RevDNS. If your host
is, say `sparcbox`, and `sparcbox` resolves in your DNS, JET will pick up the IP
address and put it into the template.

Making one
~~~~~~~~~~
Now, let's make it.

--------------------------------------------------------------------------------
cd /opt/SUNWjet/Templates
make_template sparcbox base_config sds sbd custom zfs
--------------------------------------------------------------------------------

Editing the template
~~~~~~~~~~~~~~~~~~~~

Now, you can edit the file named `sparcbox` (or whatever is the name of your
machine).

--------------------------------------------------------------------------------
vim sparcbox
--------------------------------------------------------------------------------

JumpStart templates have very good comments. Read through them and you'll get
a good idea what to put where. I'll only point out more important bits and some
gotchas.

Bits you need to edit:

Architecture type
^^^^^^^^^^^^^^^^^
Which architecture you need, can be looked up in comments. Mine was `sun4u`.

--------------------------------------------------------------------------------
base_config_ClientArch=sun4u
base_config_ClientEther=XX.XX.XX.XX.XX.XX
base_config_ClientOS=10_U6_SPARC
--------------------------------------------------------------------------------

The `10_U6_SPARC` bit should match what was used in `copy_solaris_media`.

JumpStart sysidcfg information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
When specifying `base_config_sysidcfg_nameservice`, you need to enclose the
whole thing in quotes.

--------------------------------------------------------------------------------
base_config_sysidcfg_nameservice="DNS { domain_name=(...) }"
--------------------------------------------------------------------------------

Disk labeling
^^^^^^^^^^^^^
--------------------------------------------------------------------------------
base_config_label_disks="all"
base_config_profile_fdisk="alldisk"
--------------------------------------------------------------------------------

JumpStart profile information
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`SUNWCuser` is selected by default. We won't need all that on the sparc box, and
we'll learn how to pick and choose packages we want. `SUNWCreq` gives a much
lighter OS base. (In a sense that it installs less packages.)

--------------------------------------------------------------------------------
base_config_profile_cluster=SUNWCreq
--------------------------------------------------------------------------------

Disk slices
^^^^^^^^^^^

We'll create two slices of equal size. I picked 4096MB, but you might want
something smaller or bigger, depending on the size of your hard drive. The idea
is that there are 'root' and 'alt root' partitions, both of equal size. They
can be used later with Live Upgrade, which allows OS patching without going into
single user mode and thus reducing system downtime.

I'm not creating separate `/usr` or `/var` mountpoints, for simplicity.

.JumpStart template diff
--------------------------------------------------------------------------------
@@ -330,8 +330,8 @@

 base_config_profile_dontuse=""

-base_config_profile_root=free
-base_config_profile_swap=2048
+base_config_profile_root=4096
+base_config_profile_swap=1024

 #
 # If you are using VxVM and want your boot disk to look like the mirror, then
@@ -343,15 +343,15 @@
 #

 base_config_profile_s3_mtpt=""
-base_config_profile_s3_size=""
+base_config_profile_s3_size="free"

 base_config_profile_s4_mtpt=""
 base_config_profile_s4_size=""

-base_config_profile_s5_mtpt="/var"
-base_config_profile_s5_size=""
+base_config_profile_s5_mtpt=""
+base_config_profile_s5_size="4096"

-base_config_profile_s6_mtpt="/usr"
+base_config_profile_s6_mtpt=""
 base_config_profile_s6_size=""

 #
@@ -360,7 +360,7 @@
 # please avoid using s7 for data!
 #

-base_config_profile_s7_mtpt="/opt"
+base_config_profile_s7_mtpt=""
 base_config_profile_s7_size=""
 #
 ############
--------------------------------------------------------------------------------

Additional packages and clusters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
--------------------------------------------------------------------------------
base_config_profile_add_packages="SUNWman SUNWless SUNWdoc SUNWtoo SUNWrcmdc"
base_config_profile_add_clusters="SUNWCfwshl SUNWCssh SUNWCipf SUNWCacc
SUNWCadm SUNWCkrb5 SUNWCnfsc SUNWCnfss SUNWCmpapi SUNWCdtrace SUNWCvld
SUNWCdhcp SUNWCgcc SUNWCjv SUNWCjvx SUNWClu SUNWCnca SUNWCbdb SUNWCcpc
SUNWCmd SUNWCmda SUNWCmco SUNWCopenssl SUNWCsmba SUNWCutf8 SUNWCwbem
SUNWCwget SUNWCzfs SUNWCzone SUNWCpool"
--------------------------------------------------------------------------------

Strings spanning multiple lines will work fine.

SDS -- disk mirror
^^^^^^^^^^^^^^^^^^
JumpStart can allow to create a mirrored root in a very easy way. All you need
is two disks of the same size and knowing which one is going to be the mirror.

--------------------------------------------------------------------------------
@@ -818,7 +849,7 @@
 # partitions for you, but you will have to populate the sds_database_*
 # variables if you want a metadb to exist on the root mirror.
 #
-sds_root_mirror=""
+sds_root_mirror="c0t1d0"
 # You MUST set fmthard=yes for Solaris 9 and above.
 sds_use_fmthard="yes"

--------------------------------------------------------------------------------

_(In my case, the mirror had to be `c0t0d0`, as `c0t1d0` was the primary disk.)_

It's perfectly save to skip this part during the first install and figure out
which disk is which on a live system. Then you can go back to this place and
enter the name of the mirror disk.

make_client
~~~~~~~~~~~
When your template is ready, you can `make_client`, which means that JET scripts
will pick up stuff that you enclosed in the template and configure JumpStart.

--------------------------------------------------------------------------------
make_client sparcbox
--------------------------------------------------------------------------------

_If you run it multiple times, you need to add the `-f` flag._

If this command fails you'll notice it quite easily, as it printd a huge banner
with the word 'FAILED'. Apart from the banner, it prints useful error messages.

Launching the installation
~~~~~~~~~~~~~~~~~~~~~~~~~~
You need to get to the Open Boot Prom, or OBP. You can tell that you're there
when you're seeing an `ok` prompt, like this:

--------------------------------------------------------------------------------
ok █
--------------------------------------------------------------------------------

Or, sometimes, like this:

--------------------------------------------------------------------------------
{0} ok █
--------------------------------------------------------------------------------

How to get it? This can be tricky if you don't know Sun hardware. Sun machines
like to have tiny computers in top of them, called Lights Out Managers (LOM).
These guys allow you to manage your box even if it's powered off. Well, the
power cable has to be connected, but that's enough.

TODO: Elaborate on LOM and OBP.

--------------------------------------------------------------------------------
boot net - install
--------------------------------------------------------------------------------

What's happening now, in essence, is:

* your machine makes a RARP request to get an IP address
* then it uses tftp to download Solaris kernel from the jumpstart server
* kernel boots up and mounts root via NFS from the jumpstart server
* installation scripts download packages, create file systems and all that stuff

This step should be entirely automatic. From `boot net - install`, you should go
straight to the `login:` prompt. If you're being asked installation questions
such as network configuration or time, something's missing from your jumpstart
template. You still _can_ get your machine installed that way, it's just not
fully automatic. Go back to the template and try to find settings relevant to
the questions you've been asked. A common problem is that the sparc box couldn't
find the NTP server.

When installation is complete, you'll see something like this:

--------------------------------------------------------------------------------
JumpStart is complete @ Monday  9 February 2009 08:51:40 GMT
sparcbox console login: █
--------------------------------------------------------------------------------

Congratulations! You've got Solaris installed! You can now play around and see
how sparc hardware is different from x86. Look at commands beginning with `prt`,
as they print out various bits of information.

Ah, wait, the root password. Right. It's:

--------------------------------------------------------------------------------
newroot
--------------------------------------------------------------------------------

It's JumpStart's default. Go ahead and change it.

This is just the first iteration of JumpStart install. You will probably want to
change some things in the template and reinstall your machine, and keep
repeating that until you're satisfied.

If you want to reinstall your sparc box and you're in the shell (as opposed to
OBP), you could reboot, or send a `break` to the system, but there's a simpler
way:

--------------------------------------------------------------------------------
root@netra / # reboot -- net - install
--------------------------------------------------------------------------------


When a command is missing
~~~~~~~~~~~~~~~~~~~~~~~~~
You may see that a command you had on the JumpStart server isn't there on your
sparc box.

--------------------------------------------------------------------------------
root@netra / # less
bash: less: command not found
--------------------------------------------------------------------------------

Go to the JumpStart server, find out where's your binary and which package does
it belong to.

--------------------------------------------------------------------------------
root@vsol01 / # which less
/usr/bin/less
root@vsol01 / # pkgchk -l -p /usr/bin/less
Pathname: /usr/bin/less
Type: regular file
Expected mode: 0555
Expected owner: root
Expected group: bin
Expected file size (bytes): 101412
Expected sum(1) of contents: 5918
Expected last modification: Jan 23 02:23:38 2005
Referenced by the following packages:
        SUNWless       
Current status: installed
--------------------------------------------------------------------------------

Here, we have found that the `less` command comes from `SUNWless` package. You
can go to the JumpStart template and add `SUNWless` to the
`base_config_profile_add_packages` list.


Incorporating CSW (a.k.a. Blastwave) into JumpStart
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When we're talking about making Solaris usable, we're not talking about the
temporary, virtual one, we're talking about the one you're installing on the
sparc box.

One of the steps will be installing the _useful_ software, stuff that is
available from CSW. Generally, we know how to install it, but what we really
want here, is having it installed as part of JumpStart procedure.

////////////////////////////////////////////////////////////////////////////////
We'll do it in a lazy way. First, let's mirror the whole thing and put it on the
virtual machine.

--------------------------------------------------------------------------------
rsync -v -rlptH --progress \
  rsync://ftp.heanet.ie/pub/csw/unstable/sparc \
  csw/unstable/sparc
--------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////

First we need to figure the list of packages that we want, with dependencies.
The easiest way to go at this, will consist of first installing all the CSW
packages we want on the our JumpStart server. Read what's there, and note down
which packages interest you. Of course, you can install them as well.

--------------------------------------------------------------------------------
pkgutil --available | less
pkgutil --install package_name
--------------------------------------------------------------------------------

`pkgutil` will figure out and install all the dependencies. After you're done,
you can see the full list of CSW packages that have been installed.

--------------------------------------------------------------------------------
pkginfo | gawk '$2 ~ /^CSW/ { print $2 }'
--------------------------------------------------------------------------------

`pkgutil` is able to create a _package stream_ with all the dependencies in it.
Here, we want to build package for sparc platform, even though we're working on
an x86 right now.

--------------------------------------------------------------------------------
pkgutil -s --target=sparc:5.10 -o cswstuff.sparc.5.10.pkg \
  bash_completion elinks fileutils findutils gawk ggrep gsed gtar gzip less \
  mc ncftp netcat pstree readline rsync screen shutils sudo tree \
  unarj unrar unzip vim w3m wget zsh pkgutil puppet
--------------------------------------------------------------------------------

// _My actual list is a bit longer and includes, among others, Puppet,
// a configuration management tool._

You may see a message like this: 

--------------------------------------------------------------------------------
MD5 for CSWosslrt doesn't match catalog!
at /opt/csw/bin/pkgutil line 676, <STDIN> line 1.`
--------------------------------------------------------------------------------

It is usually triggered by incomplete file in `/var/opt/csw/pkgutil/packages`.
Locate which file it was and delete it.

--------------------------------------------------------------------------------
rm /var/opt/csw/pkgutil/packages/openssl_rt-0.9.8\,REV\=2007.12.26_rev\=g-SunOS5.8-sparc-CSW.pkg.gz
--------------------------------------------------------------------------------

After pkgutil is finished, it will print a “dependency safe order” in which you
can install those packages. You don't have to write it down, JumpStart will take
care of the installation order. Let's find the package stream now. What is
a package stream? It's a form of an archive (similar to tar), which can contain
multiple packages. Packages can also come in “directory format”, which means
that a package is a directory with files in it. JumpStart wants packages in
directory format, we got a package stream. Conversion is needed.

Look into `/var/opt/csw/pkgutil/packages` and find your file:
`cswstuff.sparc.5.10.pkg`. The destination directory will be
`/export/install/pkgs/custom/sparc`.

--------------------------------------------------------------------------------
mkdir -p /export/install/pkgs/custom/sparc
pkgtrans /var/opt/csw/pkgutil/packages/cswstuff.sparc.5.10.pkg \
  /export/install/pkgs/custom/sparc all
ls -l /export/install/pkgs/custom/sparc
--------------------------------------------------------------------------------

Now, edit JumpStart template for your host and add all those CSW package names
to a variable named `custom_packages`.

--------------------------------------------------------------------------------
custom_packages="
CSWaspell
CSWbashcmplt
CSWbdb3
CSWbzip2
...
CSWzlib
CSWzsh
"
--------------------------------------------------------------------------------

Make sure that the word `custom` is included in `base_config_products`.
Otherwise your custom packages won't be installed at all.


Adding custom scripts
---------------------
Some tasks that we would like to do after installation, can be automated.

* Setting root home directory to `/root`
* Setting a better prompt
* Setting default paths
* Importing blastwave gpg key
* Configuring pkgutil

TODO: Write scripts.


Random stuff
------------

Mac addresses
~~~~~~~~~~~~~

If your box has more network interfaces, you might find (type `ifconfig -a`)
that all your interfaces have the same MAC address. You can change that by
setting a `local-mac-address?` setting with `eeprom` command.

--------------------------------------------------------------------------------
sparcbox / $ eeprom local-mac-address?
local-mac-address?=false
sparcbox / $ eeprom local-mac-address?=true
sparcbox / $ eeprom local-mac-address?
local-mac-address?=true
--------------------------------------------------------------------------------

Contact
-------
Comments and suggestions are greatly appreciated. Especially, if a bit of
information was missing and it took you time to figure it out, let me know what
it was, for the sake of future generations.  Please use the following address:

--------------------------------------------------------------------------------
python -c "print 'bWFjaWVqLmJsaXppbnNraUBnbWFpbC5jb20=\n'.decode('base64')"
--------------------------------------------------------------------------------


References
----------
* http://www.sun.com/solaris/[Solaris Operating System]
* http://www.blastwave.org/[Blastwave]
* http://www.virtualbox.org/[VirtualBox]
* http://www.sun.com/bigadmin/content/jet/[JumpStart]
* http://www.sun.com/software/security/jass/[SUNWjass]
* http://www.sun.com/service/stb/index.jsp[Explorer]
* http://devin.com/debian/debian-on-netra.html[Installing Debian on Netra T1]
  (serial cable pinout table)
* http://tinyurl.com/9t249[Creating Solaris packages]

// vim:set ft=asciidoc:
